# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

[global_tags]

[agent]
  interval = "10s"
  round_interval = true

  metric_batch_size = 1000
  metric_buffer_limit = 10000

  collection_jitter = "0s"

  flush_interval = "10s"
  flush_jitter = "0s"

  precision = ""

  debug = false
  ## Log only error level messages.

  hostname = ""
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################


# Configuration for sending metrics to InfluxDB - fil in your own!
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "your_token"
  organization = "your_org"
  bucket = "your_bucket"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################


# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = true
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = false

# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  # fielddrop = ["uptime_format"]


[[inputs.execd]]
  ## Program to run as daemon
  command = ["python3", "/home/pi/AQI-PMS7003/telegraf-pms.py"]
  signal = "none"

  ## Delay before the process is restarted after an unexpected termination
  restart_delay = "10s"
  data_format = "influx"

